"""
Streamlit –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import requests
import time
import asyncio
from datetime import datetime, timedelta

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="NER API Dashboard",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_BASE_URL = "http://localhost:8000"
REFRESH_INTERVAL = 2  # —Å–µ–∫—É–Ω–¥—ã

class Dashboard:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self):
        self.setup_session_state()
    
    def setup_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if 'metrics_history' not in st.session_state:
            st.session_state.metrics_history = []
        if 'last_update' not in st.session_state:
            st.session_state.last_update = datetime.now()
    
    def fetch_metrics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∏–∑ API"""
        try:
            response = requests.get(f"{API_BASE_URL}/metrics", timeout=5)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: {str(e)}")
        return None
    
    def fetch_health(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            response = requests.get(f"{API_BASE_URL}/health", timeout=5)
            if response.status_code == 200:
                return response.json()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è: {str(e)}")
        return None
    
    def test_prediction_api(self, text: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"""
        try:
            response = requests.post(
                f"{API_BASE_URL}/api/predict",
                json={"input": text},
                timeout=10
            )
            if response.status_code == 200:
                return response.json(), response.elapsed.total_seconds() * 1000
            else:
                return {"error": f"HTTP {response.status_code}"}, None
        except Exception as e:
            return {"error": str(e)}, None
    
    def render_header(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        st.title("ü§ñ NER API Dashboard")
        st.markdown("---")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        col1, col2, col3 = st.columns([2, 1, 1])
        with col1:
            st.markdown(f"**–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** {datetime.now().strftime('%H:%M:%S')}")
        with col3:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", type="primary"):
                st.rerun()
    
    def render_health_status(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è"""
        st.subheader("üè• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
        
        health_data = self.fetch_health()
        if health_data:
            col1, col2, col3 = st.columns(3)
            
            with col1:
                status_color = "üü¢" if health_data['status'] == 'healthy' else "üî¥"
                st.metric("–°—Ç–∞—Ç—É—Å", f"{status_color} {health_data['status'].upper()}")
            
            with col2:
                model_status = "‚úÖ" if health_data['model_loaded'] else "‚ùå"
                st.metric("–ú–æ–¥–µ–ª—å", f"{model_status} {'–ó–∞–≥—Ä—É–∂–µ–Ω–∞' if health_data['model_loaded'] else '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}")
            
            with col3:
                device_icon = "üöÄ" if "cuda" in health_data['device'].lower() else "üíª"
                st.metric("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", f"{device_icon} {health_data['device']}")
    
    def render_metrics(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        metrics_data = self.fetch_metrics()
        if metrics_data:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            current_time = datetime.now()
            metrics_data['timestamp'] = current_time
            st.session_state.metrics_history.append(metrics_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∑–∞–ø–∏—Å—è–º–∏
            if len(st.session_state.metrics_history) > 100:
                st.session_state.metrics_history = st.session_state.metrics_history[-100:]
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", metrics_data['total_requests'])
            
            with col2:
                st.metric("RPS", f"{metrics_data['requests_per_second']:.1f}")
            
            with col3:
                st.metric("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º—Å)", f"{metrics_data['average_response_time']:.1f}")
            
            with col4:
                success_rate = (
                    metrics_data['successful_requests'] / max(metrics_data['total_requests'], 1) * 100
                )
                st.metric("–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (%)", f"{success_rate:.1f}%")
            
            # –ì—Ä–∞—Ñ–∏–∫–∏
            if len(st.session_state.metrics_history) > 1:
                self.render_performance_charts()
    
    def render_performance_charts(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        df = pd.DataFrame(st.session_state.metrics_history)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ–∏–∫ RPS
            fig_rps = px.line(
                df, 
                x='timestamp', 
                y='requests_per_second',
                title='–ó–∞–ø—Ä–æ—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É (RPS)',
                labels={'requests_per_second': 'RPS', 'timestamp': '–í—Ä–µ–º—è'}
            )
            fig_rps.update_layout(height=300)
            st.plotly_chart(fig_rps, use_container_width=True)
        
        with col2:
            # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
            fig_time = px.line(
                df, 
                x='timestamp', 
                y='average_response_time',
                title='–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–º—Å)',
                labels={'average_response_time': '–í—Ä–µ–º—è (–º—Å)', 'timestamp': '–í—Ä–µ–º—è'}
            )
            fig_time.update_layout(height=300)
            st.plotly_chart(fig_time, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ –æ—à–∏–±–æ–∫
        if 'error_rate' in df.columns:
            fig_errors = px.bar(
                df.tail(20), 
                x='timestamp', 
                y=['successful_requests', 'failed_requests'],
                title='–£—Å–ø–µ—à–Ω—ã–µ vs –ù–µ—É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã',
                labels={'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'timestamp': '–í—Ä–µ–º—è'}
            )
            fig_errors.update_layout(height=300)
            st.plotly_chart(fig_errors, use_container_width=True)
    
    def render_api_tester(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞ API"""
        st.subheader("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API")
        
        with st.form("api_test_form"):
            test_input = st.text_area(
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                value="—Å–≥—É—â–µ–Ω–Ω–æ–µ –º–æ–ª–æ–∫–æ",
                height=100
            )
            submit_button = st.form_submit_button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å", type="primary")
        
        if submit_button and test_input:
            with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å..."):
                result, response_time = self.test_prediction_api(test_input)
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                if 'error' not in result:
                    st.success("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
                    st.json(result)
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            
            with col2:
                if response_time:
                    st.metric("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞", f"{response_time:.1f} –º—Å")
    
    def render_load_testing(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        st.subheader("‚ö° –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            num_requests = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤", min_value=1, max_value=100, value=10)
        
        with col2:
            concurrent_requests = st.number_input("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", min_value=1, max_value=20, value=5)
        
        with col3:
            test_text = st.text_input("–¢–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", value="–º–æ–ª–æ–∫–æ –ø—Ä–æ—Å—Ç–æ–∫–≤–∞—à–∏–Ω–æ")
        
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç", type="primary"):
            progress_bar = st.progress(0)
            results_placeholder = st.empty()
            
            # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            response_times = []
            errors = 0
            
            for i in range(num_requests):
                result, response_time = self.test_prediction_api(test_text)
                
                if response_time:
                    response_times.append(response_time)
                else:
                    errors += 1
                
                progress_bar.progress((i + 1) / num_requests)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                if response_times:
                    avg_time = sum(response_times) / len(response_times)
                    min_time = min(response_times)
                    max_time = max(response_times)
                    
                    results_placeholder.metric(
                        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {i+1}/{num_requests}",
                        f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.1f}–º—Å | –û—à–∏–±–∫–∏: {errors}"
                    )
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if response_times:
                st.success(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {sum(response_times)/len(response_times):.1f}–º—Å")
                
                # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                fig = px.histogram(
                    x=response_times,
                    nbins=20,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞"
                )
                st.plotly_chart(fig, use_container_width=True)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        self.render_header()
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        with st.sidebar:
            st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
            
            if auto_refresh:
                refresh_rate = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", 1, 10, 2)
                # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                time.sleep(refresh_rate)
                st.rerun()
            
            st.markdown("---")
            st.markdown("### üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            st.markdown(f"**API URL:** {API_BASE_URL}")
            st.markdown(f"**–í–µ—Ä—Å–∏—è:** 1.0.0")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.render_health_status()
        st.markdown("---")
        self.render_metrics()
        st.markdown("---")
        self.render_api_tester()
        st.markdown("---")
        self.render_load_testing()

# –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
if __name__ == "__main__":
    dashboard = Dashboard()
    dashboard.run()